{"version":3,"sources":["app/application.js","app/charts.js","app/dataparse.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnxGA;AAAA","file":"public\\app.js","sourcesContent":["\"use strict\";\n\n/**\n * Path with filename and -end of the data base file to read.\n * \n * @global\n * @type {string}\n * @memberof force\n */\nvar sourceFileName = \"data/data20144.csv\";\n\nvar App = {\n  init: function init() {\n    require('charts').init(sourceFileName);\n    //dc.renderAll();\n  }\n};\n\nmodule.exports = App;\n","exports.init = function(datafile) {\r\n\r\n  var yearRingChart   = dc.pieChart(\"#chart-ring-year\");\r\n\r\n  var q = queue()\r\n    .defer(d3.dsv(\";\", \"text/csv\"), datafile);\r\n\r\n  q.await(initCharts);\r\n\r\n  function initCharts(error, rawData) \r\n  {\r\n    data = require('dataparse').parse(rawData);\r\n    nodes = data[0];\r\n    links = data[1];\r\n    var ndxNodes = crossfilter(data);\r\n    var ndxLinks = crossfilter(links);\r\n\r\n    var yearDim  = ndxLinks.dimension(function(d) {return +d.year;});\r\n\r\n    var spendPerYear = yearDim.group().reduceSum(function(d) {return +d.euro;});\r\n\r\n    yearRingChart\r\n      .width(200).height(200)\r\n      .dimension(yearDim)\r\n      .group(spendPerYear)\r\n      .innerRadius(50);\r\n  }\r\n}","exports.parse = function(data) {\r\n\r\n  /**\r\n   * All final, unchangeable nodes in this graph. The here documented properties are created by this visualization all others by D3.\r\n   * \r\n   * @type {array}\r\n   * @alias force#nodes\r\n   * @memberof force\r\n   * @property {string} force#nodes.name of an legal entity or media owner.\r\n   * @property {number} force#nodes.overall of money spent or received.\r\n   * @property {boolean} force#nodes.gov true if an legal entity, otherwise false and therefore a media owner node.\r\n   * @see {@link https://github.com/mbostock/d3/wiki/Force-Layout#nodes|D3 force layout nodes}\r\n   */\r\n  var nodes = [];\r\n\r\n  /**\r\n   * All final, unchangeable links (edges) between the nodes in the graph as D3 objects. The here documented properties are created by this visualization all others by D3.\r\n   * \r\n   * @type {array}\r\n   * @alias force#links\r\n   * @memberof force\r\n   * @property {number} force#links.quarter in the transaction has happened.\r\n   * @property {number} force#links.year in the transaction has happened.\r\n   * @property {number} force#links.law acted upon or paragraph, respectively.\r\n   * @property {number} force#links.euro amount of money.\r\n   * @see {@link https://github.com/mbostock/d3/wiki/Force-Layout#links|D3 force layout links}\r\n   */\r\n  var links = [];\r\n\r\n  /**\r\n   * Enables a rounding of all numbers.\r\n   * \r\n   * @property {Number} rounds the number to two.\r\n   * @this is the number to round.\r\n   */\r\n  Number.prototype.roundToTwo = function()\r\n  {\r\n    return Math.round(this * 100) / 100;\r\n  }\r\n\r\n  // Since it is a csv file we have to format the data a bit\r\n  data.forEach(function (d) {\r\n        \r\n    if (+d.LEERMELDUNG == 0)\r\n    {\r\n      var ri = -1;\r\n      var mi = -1;\r\n\r\n      d.EURO = parseFloat(d.EURO.replace(',', '.'));\r\n\r\n      for (var i = 0; (ri == -1 || mi == -1) && i < nodes.length; i++)\r\n      {\r\n        if (d.EURO > 10000000) // Filter unrealistic values for Austria\r\n          return;\r\n\r\n        if (nodes[i].name == d.RECHTSTRGER)\r\n        {\r\n          ri = i;\r\n          nodes[i].overall = (nodes[i].overall + d.EURO).roundToTwo();\r\n        }\r\n\r\n        if (nodes[i].name == d.MEDIUM_MEDIENINHABER)\r\n        {\r\n          mi = i;\r\n          nodes[i].overall = (nodes[i].overall + d.EURO).roundToTwo();\r\n        }\r\n      }\r\n\r\n      if (ri == -1)\r\n      {// Create new entry\r\n        nodes.push({\r\n          name : d.RECHTSTRGER,\r\n          overall : d.EURO,\r\n          gov : 1,\r\n        });\r\n        ri = nodes.length - 1;\r\n      }\r\n\r\n      if (mi == -1)\r\n      {// Create new entry\r\n        nodes.push({\r\n          name : d.MEDIUM_MEDIENINHABER,\r\n          overall : d.EURO,\r\n          gov : 0,\r\n        });\r\n        mi = nodes.length - 1;\r\n      }\r\n\r\n      links.push({// Return a link object with meta data\r\n        source : ri, // Index of legal entity\r\n        target : mi, // Index of media owner\r\n        quarter : +d.QUARTAL.substring(4), // The quartal\r\n        year : +d.QUARTAL.substring(0, 4), // The year\r\n        law : +d.BEKANNTGABE, // Law number\r\n        euro : d.EURO// Money value\r\n      });\r\n    }\r\n    else\r\n    {\r\n      console.log(\"leermeldung \" + d.MEDIUM_MEDIENINHABER);\r\n    }\r\n  });\r\n\r\n  return [nodes, links];\r\n}"]}